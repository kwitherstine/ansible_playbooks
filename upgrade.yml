---
#- name: Check if route map is applied
#  shell: vtysh -c "show run" | grep prepend | wc -l
#  register: prepend_count

   - name: fetch ports.conf
     fetch:
       dest=roles/leafs/{{ansible_hostname}}/ports.conf
       src=/etc/cumulus/ports.conf
       flat=yes
#   when: prepend_count.stdout | int < 3

   - name: copy quagga daemons file
     fetch:
       dest=roles/leafs/{{ansible_hostname}}/daemons
       src=/etc/quagga/daemons
       flat=yes

   - name: copy Quagga.conf
     fetch:
       dest=roles/leafs/{{ansible_hostname}}/Quagga.conf
       src=/etc/quagga/Quagga.conf
       flat=yes

# the following line is a way to copy the entire /etc/network/interfaces.d directory into a backup location. 
# syncronize module would be preferred, but won't work with Vagrant for test environments.
# fetch module won't work as its only for copying single files, need to add the loop.
# syncronize option is listed and commented out

   - name: List files in interfaces.d directory
     shell: ls /etc/network/interfaces.d/
     register: interfaces_files

   - name: Fetch interfaces_files
     fetch:
       dest=roles/leafs/
       src=/etc/network/interfaces.d/{{item}}
     with_items: interfaces_files.stdout_lines

#    - name: Copy interfaces from the remote switch and save to local drive
#      synchronize: mode=pull src=/etc/network/interfaces.d dest=roles/leafs/{{ansible_hostname}}/interfaces.d
#        recursive=yes

# The reason for using cl-bgp commands instead of using a Quagga template
# Is because then two quagga templates will have to be maintained
# Probably a good candidate for a module, but this works for now.
# A smarter way to do this would be to load from Vars file to identify
# the names of the peer-groups. Again, good enough for proof of concept
#- name: Apply route maps to drain traffic
#  command: "{{item[0] | replace('%peer_group%', item[1])}}"
#  with_nested:
#    - ["cl-bgp route-map set prepend in neighbor %peer_group% ipv4 unicast",
#       "cl-bgp route-map set prepend in neighbor %peer_group% ipv6 unicast",
#       "cl-bgp route-map set prepend out neighbor %peer_group% ipv4 unicast",
#       "cl-bgp route-map set prepend out neighbor %peer_group% ipv6 unicast"]
#    - ["fabric", "servers"]
#  when: prepend_count.stdout | int < 3
#
#- name: Save Quagga Config
#  command: cl-rctl write-config integrated
#  when: prepend_count.stdout | int < 3

#- name: Verify traffic is drained. This will take a moment...
#  interface_stats:

# - name: Reboot!
#   shell: sleep 2 && shutdown -r now "Ansible reboot triggered"
#   async: 1
#   poll: 0
#   ignore_errors: true

# - name: Waiting for leafs to restore. Please stand by...
#   local_action:
#     wait_for
#     host={{ansible_ssh_host}}
#     port={{ ansible_ssh_port }}
#     delay=60
#   become: False

# - name: load vars
#   include_vars: roles/leafs/vars/main.yml

# - name: Copy Quagga Configuration
#   template:
#     src=roles/leafs/templates/Quagga.conf.j2
#     dest=/etc/quagga/Quagga.conf
#   notify: reload quagga

# - name: copy ports.conf
#   copy: src=roles/leafs/{{ansible_hostname}}/ports.conf dest=/etc/cumulus/
#   notify: restart switchd

# - name: copy interfaces
#   copy: src=roles/leafs/{{ansible_hostname}}/interfaces dest=/etc/network/
#   notify: reload networking

# - name: copy Quagga daemons
#   copy: src=roles/leafs/{{ansible_hostname}}/daemons dest=/etc/quagga/
#   notify: restart quagga

# - name: copy Quagga conf
#   copy: src=roles/leafs/{{ansible_hostname}}/Quagga.conf dest=/etc/quagga/
#   notify: reload quagga